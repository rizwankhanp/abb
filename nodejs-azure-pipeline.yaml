name: Azure CI/CD

trigger:
  branches:
    include:
      - develop
      - release/*
      - Main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  containerName: '$web'
  sourceFolder: 'dist'

stages:
- stage: Build
  displayName: 'Build Vite Project'
  jobs:
  - job: Build
    steps:
    - script: |
        echo "Removing default Node.js versions..."
        sudo rm -rf /opt/hostedtoolcache/node
      displayName: 'Remove Old Node.js Versions'

    - script: |
        echo "Installing Node.js 22.14.0..."
        curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
        sudo apt-get install -y nodejs
        node -v
        npm -v
      displayName: 'Install Node.js 22.14.0'

    - script: |
        echo "Running npm install"
        npm install
        npm audit fix --force  # Fix dependencies

        # Extract branch name correctly
        BRANCH_NAME=$(echo $(Build.SourceBranch) | sed 's#refs/heads/##')
        
        # Determine environment
        if [[ "$BRANCH_NAME" =~ ^release/.* ]]; then
          ENV_NAME="qa"
        elif [[ "$BRANCH_NAME" == "develop" ]]; then
          ENV_NAME="uat"
        else
          echo "Unknown branch: $BRANCH_NAME, exiting."
          exit 1
        fi
        
        echo "Building for environment: $ENV_NAME"
        
        #  Correct way to set output variable
        echo "##vso[task.setvariable variable=ENV_NAME;isOutput=true]$ENV_NAME"

        # Build for each environment
        for ENV in $ENV_NAME; do
          npm run build:$ENV
        done
      name: SetEnv
      displayName: 'Build Vite project'

    - script: |
        echo "Debugging: ENV_NAME is set to $(ENV_NAME)"
      displayName: 'Debug ENV_NAME'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/dist'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy_QA
  displayName: 'Deploy to QA'
  dependsOn: Build
  condition: and(succeeded(), contains(dependencies.Build.outputs['Build.SetEnv.ENV_NAME'], 'qa'))
  variables:
    STORAGE_ACCOUNT_NAME: 'abbcompanyportalqa'
  jobs:
  - job: Deploy_QA
    steps:
    - download: current
      artifact: drop

    - script: |
        echo "Deploying to QA environment"
        echo "Using storage account: $(STORAGE_ACCOUNT_NAME)"
      displayName: 'Set Storage Account Name'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'abb Main Subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Uploading to QA Storage Account: $(STORAGE_ACCOUNT_NAME)"
          az storage blob upload-batch -d '$web' --source "$(Pipeline.Workspace)/drop" --account-name "$(STORAGE_ACCOUNT_NAME)" --overwrite
      displayName: 'Upload to QA Storage'

- stage: Deploy_UAT
  displayName: 'Deploy to UAT'
  dependsOn: Build
  condition: and(succeeded(), contains(dependencies.Build.outputs['Build.SetEnv.ENV_NAME'], 'uat'))
  variables:
    STORAGE_ACCOUNT_NAME: 'abbcompanyportaluat'
  jobs:
  - job: Deploy_UAT
    steps:
    - download: current
      artifact: drop

    - script: |
        echo "Deploying to UAT environment"
        echo "Using storage account: $(STORAGE_ACCOUNT_NAME)"
      displayName: 'Set Storage Account Name'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'abb Main Subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Uploading to UAT Storage Account: $(STORAGE_ACCOUNT_NAME)"
          az storage blob upload-batch -d '$web' --source "$(Pipeline.Workspace)/drop" --account-name "$(STORAGE_ACCOUNT_NAME)" --overwrite
      displayName: 'Upload to UAT Storage'
